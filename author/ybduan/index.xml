<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ybduan on </title>
    <link>http://blog.titangroupco.com/author/ybduan/</link>
    <description>Recent content in Ybduan on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [DevTeam](mailto:dev@titangroupco.com) of Titan.</copyright>
    <lastBuildDate>Thu, 05 Jan 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.titangroupco.com/author/ybduan/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript Prototype</title>
      <link>http://blog.titangroupco.com/2017/01/05/javascript-prototype/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/05/javascript-prototype/</guid>
      <description>&lt;p&gt;&lt;em&gt;note of &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes&#34;&gt;You Don&amp;rsquo;t know JS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-types-in-javascript&#34;&gt;Data types in Javascript&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Javascript has 6 primitive data(immutable) types
typeof 3.14  // &#39;number&#39;;
typeof &#39;bla&#39;  // &#39;string&#39;;
typeof true  // &#39;boolean&#39;
typeof Symbol.iterator  // &#39;symbol&#39;
typeof undefined  // &#39;undefined&#39;
typeof null  // &#39;object&#39;

// and object
typeof {a:1}  // &#39;object&#39;
typeof function fn(){}  // &#39;function&#39;, it&#39;s in fact an object with special type tag


// object has sub type
Object.prototype.toString.call(fn)  // &#39;[object Function]&#39;

// primitive types have object equivalent that wrap around them.
Object.prototype.toString.call(3.14)  // &#39;[object Number]&#39;
Object.prototype.toString.call(&#39;bla&#39;)  // &#39;[object String]&#39;
Object.prototype.toString.call(true)  // &#39;[object Boolean]&#39;
Object.prototype.toString.call(Symbol.iterator)  // &#39;[object Symbol]&#39;

Object.prototype.toString.call({})  // &#39;[object Object]&#39;
Object.prototype.toString.call([])  // &#39;[object Array]&#39;
Object.prototype.toString.call(/[a-zA-Z]+/)  // &#39;[object RegExp]&#39;

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Vue</title>
      <link>http://blog.titangroupco.com/2016/10/31/introduction-to-vue/</link>
      <pubDate>Mon, 31 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2016/10/31/introduction-to-vue/</guid>
      <description>&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
  {{ message }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var app = new Vue({
  el: &#39;#app&#39;,
  data: {
    message: &#39;Hello Vue!&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Webpack</title>
      <link>http://blog.titangroupco.com/2016/10/28/webpack/</link>
      <pubDate>Fri, 28 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2016/10/28/webpack/</guid>
      <description>&lt;h2 id=&#34;motivation-or-problems&#34;&gt;Motivation or Problems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are multiple standards of module system in JS world including CommonJS, AMD, ES6 modules and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag style.&lt;/li&gt;
&lt;li&gt;There are two extremes when transferring modules

&lt;ol&gt;
&lt;li&gt;one request per module&lt;/li&gt;
&lt;li&gt;All modules in one request&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Why should a module system only help the developer with JavaScript?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;io&#34;&gt;IO&lt;/h2&gt;

&lt;p&gt;Webpack is a module bundler.&lt;/p&gt;

&lt;p&gt;It takes a bunch of files, treating each as a module, figuring out the dependencies between them, and bundle them into static assets that are ready for deployment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dtinth.github.io/webpack-docs-images/usage/how-it-works.png&#34; alt=&#34;what webpack does&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>