<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://blog.titangroupco.com/author/wubing/index.xml</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [DevTeam](mailto:dev@titangroupco.com) of Titan.</copyright>
    <atom:link href="http://blog.titangroupco.com/author/wubing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>javascript events</title>
      <link>http://blog.titangroupco.com/2017/03/03/javascript-events</link>
      <pubDate>Fri, 03 Mar 2017 10:34:39 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/03/03/javascript-events</guid>
      <description>&lt;h1 id=&#34;javascript事件机制&#34;&gt;JavaScript事件机制&lt;/h1&gt;

&lt;p&gt;事件是实现页面交互的常用手段，在浏览器环境下的事件主要由DOM、BOM事件类型组成。&lt;/p&gt;

&lt;h2 id=&#34;一-什么是事件&#34;&gt;一、什么是事件&lt;/h2&gt;

&lt;p&gt;事件就是文档、浏览器窗口中发生的一些特定的交互瞬间，一般是由用户主动触发，在事件被触发之后，可以根据是否预先绑定了事件处理程序来决定如何对这个事件的发生做出反应。
&lt;/p&gt;

&lt;h2 id=&#34;二-事件流&#34;&gt;二、事件流&lt;/h2&gt;

&lt;p&gt;事件流是指页面中的元素、节点接收某一个被触发的事件的顺序。分为事件冒泡、事件捕获和DOM事件流。
IE和Netscape的浏览器开发团队提出了两种截然不同的，甚至是完全相反的事件流概念。IE的事件流是事件冒泡，而Netscape的事件流是事件捕获。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;事件冒泡：事件发生后，由目标元素首先接收，然后按照DOM结构，逐级向上传播，直至到达最顶层的根节点document&lt;/li&gt;
&lt;li&gt;事件捕获：事件发生后，由根节点document先接收，然后按照DOM结构，逐级向下传播，直到事件的目标元素&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DOM事件流：包括三个阶段：当一个事件发生，首先进入事件捕获阶段，按照事件捕获流进行传播；然后进入目标阶段，目标元素接收到事件；最后进入事件冒泡阶段，按照事件冒泡流传播。&lt;img src=&#34;http://7xi480.com1.z0.glb.clouddn.com/121ba0d37798d6d23227d2dd49d0e58c_articlex.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-基础事件操作&#34;&gt;三、基础事件操作&lt;/h2&gt;

&lt;h3 id=&#34;1-事件监听&#34;&gt;1、事件监听&lt;/h3&gt;

&lt;p&gt;浏览器会根据某些操作触发对应事件，比如我们打开一个页面，浏览器加载完成之后就会触发load事件。当我们监听load事件，显示欢迎信息，那么浏览器在加载完成后就会显示欢迎信息。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;html内联属性：HTML元素里面直接填写与事件有关属性，属性值为JavaScript代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button onclick=&amp;quot;alert(&#39;you clicked this btn&#39;)&amp;quot;&amp;gt;click me！&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DOM属性绑定：使用DOM元素的onXXX属性设置，简单易懂，兼容性好，但是如果在后面的代码中再次为ele绑定一个回调函数，会覆盖掉之前回调函数的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;click me!&amp;lt;/button&amp;gt;
   &amp;lt;script&amp;gt;
       var ele = document.getElementById(&#39;btn&#39;);
       ele.onclick = function (event) {
           alert(&#39;you clicked again&#39;);
       }
   &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用事件监听函数：标准的事件监听函数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;element.addEventListener(event-name,callback,use-capture)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在element这个对象上面添加一个事件监听器，当监听到有事件发生时，调用这个回调函数，use-capture表示该事件监听是在‘捕获’阶段监听（设置为true）还是在‘冒泡’阶段监听（设置为false）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button&amp;gt;click me!&amp;lt;/button&amp;gt;
&amp;lt;script&amp;gt;
    var ele = document.getElementByTagName(&#39;button&#39;);
    ele[0].addEventListener(&#39;click&#39;, function () {
        alert(&#39;the third time clicked&#39;);
    }, false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-移除事件监听&#34;&gt;2、移除事件监听&lt;/h3&gt;

&lt;p&gt;当我们为某个元素绑定了一个事件，每次触发这个事件的时候，都会执行事件绑定的回调函数。如果我们想解除绑定，需要使用 removeEventListener 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;element.removeEventListener(event-name,callback,use-capture)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是，绑定事件时的回调函数不能是匿名函数，必须是一个声明的函数，因为解除事件绑定时需要传递这个回调函数的引用，才可以断开绑定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;click me&amp;lt;/button&amp;gt;
&amp;lt;script&amp;gt;
var elbtn = document.getElementById(&#39;btn&#39;);
var fun = function () {
    alert(this button is only can click once);
    elbtn.removeEventListener(&#39;click&#39;, fun, false);
};
elbtn.addEventListener(&#39;click&#39;, fun, false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;window事件&#34;&gt;window事件&lt;/h1&gt;

&lt;h2 id=&#34;常用的window事件&#34;&gt;常用的window事件&lt;/h2&gt;

&lt;p&gt;例子：&lt;a href=&#34;https://jsfiddle.net/uujt1o1p/&#34;&gt;https://jsfiddle.net/uujt1o1p/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;onload加载事件和onunload卸载事件&#34;&gt;onload加载事件和onunload卸载事件&lt;/h3&gt;

&lt;p&gt;当页面完全加载之后触发加载事件（onload）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onload = function () {
  alert(&amp;quot;here is after  onload&amp;quot;);
}
alert(&#39;onloading...&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当页面完全卸载之后触发卸载事件(unload)，在页面从服务器获取到需要加载的新的页面后调用，不能阻止页面的刷新和关闭。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//firefox不支持，IE和360生效，chrome系统自定义
var isSave = false;
function save() {
 alert(&#39;this is save function running.&#39;);
  isSave = true;
}
window.onbeforeunload = function () {
  console.log(&#39;this is onbeforeunload&#39;);
  if (!isSave) {
      return &#39;当前数据还没保存，关闭或刷新窗口会自动保存，是否继续？&#39;;
  } else {
      return &#39;&#39;;
  }
};
window.onunload = function () {
  if (!isSave) {
      save();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;onbeforeunload事件：在页面去服务器读取新的页面前调用，可以阻止页面的关闭和刷新，还有unload事件的执行
so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;页面加载时只执行onload&lt;/li&gt;
&lt;li&gt;页面关闭时先执行onbeforeunload，最后onunload&lt;/li&gt;
&lt;li&gt;页面刷新时先执行onbeforeunload，然后onunload，最后onload。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;onscroll滚动事件&#34;&gt;onscroll滚动事件&lt;/h3&gt;

&lt;p&gt;当滚动的时候触发滚动事件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onscroll = function() {
      console.log(&amp;quot;滚动&amp;quot;);

      var h = document.documentElement.scrollTop || document.body.scrollTop;
      console.log(h);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;document.documentElement.scrollTop 和document.body.scrollTop：是用来设置滚动tiao的高度。
document.documentElement.scrollTop：IE，firefox；
document.body.scrollTop: chrome,360&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 返回页面顶部
function fun() {
    document.documentElement.scrollTop = 0;
    document.body.scrollTop = 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;onresize窗口变化事件&#34;&gt;onresize窗口变化事件&lt;/h3&gt;

&lt;p&gt;改变窗口尺寸时触发窗口变化事件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onresize = function() {
      console.log(&amp;quot;窗口变化&amp;quot;);

      var w = document.documentElement.clientWidth || document.body.clientWidth || window.innerWidth;

      var h = document.documentElement.clientHeight || document.body.clientHeight || window.innerHeight;

      console.log(w, h);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;键盘事件&#34;&gt;键盘事件&lt;/h1&gt;

&lt;p&gt;js中的键盘事件只有三种：keydown、keypress、keyup。触发顺序为：keydown ——&amp;gt; keypress ——&amp;gt; keyup。
当按下一个键不放开时，一般会重复触发keydown+keypress，直到放开后触发一个keyup事件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;keydown()：在键盘按下时触发&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;keypress()：在敲击按键时ch，即按下并抬起同一个按键&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;keyup()：在按键释放时触发&lt;/p&gt;

&lt;h2 id=&#34;获取键盘上的ascii码&#34;&gt;获取键盘上的ascII码&lt;/h2&gt;

&lt;p&gt;栗子：&lt;a href=&#34;https://jsfiddle.net/fz87pk7t/1/&#34;&gt;https://jsfiddle.net/fz87pk7t/1/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;// 获取键码
$(document).keydown(function (event) {
    alert(event.keyCode + &#39;keydown&#39;);
});

$(document).keyup(function (event) {
    alert(event.keyCode + &#39;keyup&#39;);
});

$(document).keypress(function (event) {
    alert(event.keyCode + &#39;keypress&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字母和数字键的键码值(keyCode)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;77&lt;/td&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;87&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;72&lt;/td&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;td&gt;81&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;82&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;数字键盘上的键的键码值(keyCode)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;健码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;健码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;104&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;105&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;109&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;功能键键码值(keyCode)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;健码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;健码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;F1&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;F7&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F2&lt;/td&gt;
&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F3&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F4&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;F10&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F5&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;F11&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F6&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;控制键键码值(keyCode)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BackSpace&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;Right Arrow&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;-_&lt;/td&gt;
&lt;td&gt;189&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Spacebar&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Down Arrow&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;.&amp;gt;&lt;/td&gt;
&lt;td&gt;190&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Clear&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Page Up&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;Insert&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;/?&lt;/td&gt;
&lt;td&gt;191&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Page Down&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;`~&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shift&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;End&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;Num Lock&lt;/td&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;td&gt;[{&lt;/td&gt;
&lt;td&gt;219&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;Home&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;;:&lt;/td&gt;
&lt;td&gt;186&lt;/td&gt;
&lt;td&gt;\ |&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;Left Arrow&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;=+&lt;/td&gt;
&lt;td&gt;187&lt;/td&gt;
&lt;td&gt;]}&lt;/td&gt;
&lt;td&gt;221&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cape Lock&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;Up Arrow&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;,&amp;lt;&lt;/td&gt;
&lt;td&gt;188&lt;/td&gt;
&lt;td&gt;&amp;rsquo;&amp;rdquo;&lt;/td&gt;
&lt;td&gt;222&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;三种键盘事件的区别&#34;&gt;三种键盘事件的区别&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;keydown 和 keyup 是比较底层的事件，分别对应一个键的按下与放开，键盘上任何一个键被点按，都会触发这两个事件。&lt;/li&gt;
&lt;li&gt;keypress 更接近用户，只有可打印的字符和控制字符（如换行）被键入才触发。&lt;/li&gt;
&lt;li&gt;keydown 和 keyup 被触发后，都会产生一个虚拟键盘码，用来表示按下的是哪个键。键盘上的每个键只对应一个虚拟键盘码。keypress 被触发后产生的是实际键入的字符的 Ascll 编码，而没有对应的虚拟键盘码。这两种编码有时在数值上是相等的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;注意&#34;&gt;注意：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;keypress：只针对一些可以打印出来的字符有效，而对于功能键如F1-F12、Backspace、Enter、Escape、PageUp、PageDown和箭头方向等，就不会产生keypress事件，但是可以产生keydown、keyup事件&lt;/li&gt;
&lt;li&gt;keypress的keyCode对字母大小写敏感，而keydown和keyup不敏感；&lt;/li&gt;
&lt;li&gt;keypress事件无法区分主键盘上的数字键和副键盘数字键，而keydown和keyup的keyCode可以区分。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;鼠标事件mouseevent&#34;&gt;鼠标事件MouseEvent&lt;/h1&gt;

&lt;p&gt;常见的鼠标事件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mousedown:鼠标的犍钮被按下&lt;/li&gt;
&lt;li&gt;mouseup:鼠标的犍钮被释放弹起&lt;/li&gt;
&lt;li&gt;click：单击，mousedown + mouseup =&amp;gt; click&lt;/li&gt;
&lt;li&gt;dblclick:双击，连续两次单击&lt;/li&gt;
&lt;li&gt;contextmenu:弹出右键菜单

&lt;ul&gt;
&lt;li&gt;el.contextmenu(handle)或el.on(&amp;lsquo;contextmenu&amp;rsquo;,handle)&lt;/li&gt;
&lt;li&gt;el.off(&amp;lsquo;contextmenu&amp;rsquo;),移除事件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mouseover:鼠标移到目标上方&lt;/li&gt;
&lt;li&gt;mouseout:鼠标移出目标的上方&lt;/li&gt;
&lt;li&gt;mousemove:鼠标在目标上移动&lt;/li&gt;
&lt;li&gt;hover():鼠标指针进入和离开元素事被执行，同时绑定mouseenter和mouseleave事件，el.hover(handlerIn,handlerOut)等同于el.mouseenter(handlerIn).mouseleave(handlerOut);&lt;/li&gt;
&lt;li&gt;MouseEvent.button:返回值为数值(在DOM2.0中，W3C对鼠标事件作了现范，鼠标事件被解析为MouseEvent（我们可以用e.constructor == MouseEvent来判断其是否为鼠标事件，是左键点击还是右键点击由它的一个叫button的属性判定。以下就是W3C的标准现范：)

&lt;ul&gt;
&lt;li&gt;1：左键被按下&lt;/li&gt;
&lt;li&gt;2：中键被按下（没测出来中键）&lt;/li&gt;
&lt;li&gt;3：右键被按下&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;栗子：&lt;a href=&#34;https://jsfiddle.net/9gjz3eux/1/&#34;&gt;https://jsfiddle.net/9gjz3eux/1/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>