<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on A POEM OF LIFE</title>
    <link>http://blog.titangroupco.com/post/index.xml</link>
    <description>Recent content in Post-rsses on A POEM OF LIFE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jan 2017 13:20:36 +0800</lastBuildDate>
    <atom:link href="http://blog.titangroupco.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python Decorator</title>
      <link>http://blog.titangroupco.com/post/python-decorator/</link>
      <pubDate>Sun, 22 Jan 2017 13:20:36 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/post/python-decorator/</guid>
      <description>

&lt;h2 id=&#34;什么是装饰器&#34;&gt;什么是装饰器&lt;/h2&gt;

&lt;p&gt;在coding的时候，你经常会需要计算一个函数的执行时间，最容易想到的方法是在每个函数内部进行计算。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello():
    start = time.time()
    print &#39;Hello&#39;
    print &#39;Spend &#39;, time.time() - start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也有可能是在函数外部计算时间。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello():
    print &#39;Hello&#39;

start = time.time()
hello()
print &#39;Spend &#39;, time.time() - start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，一个hello还好，如果还有hello1、 hello2、hello3，甚至更多的时候你就懵了。这时候，你就会想有没有不需要写这么多重复代码的方法。&lt;/p&gt;

&lt;p&gt;要解决这个问题，你首先需要知道在Python中，&lt;code&gt;function is the first class&lt;/code&gt;。有一种意译是，“函数是一等公民”。你想啊，函数都是一等公民了，那它肯定可以像基本类型那样作为函数参数喽。于是呢，就有了下面这种方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def spend(func):
    def _spend():
        start = time.time()
        func()
        print &#39;Spend &#39;, time.time() - start
    return _spend

def hello():
    print &#39;Hello&#39;

hello = spend(hello)
hello()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样是不是少写了很多代码，但是呢，还有一个问题，一旦需要计算时间的函数多了，就有可能漏掉一个两个。那么，将时间计算写在函数定义的时候总不会漏了吧。于是乎，Python从2.4版本开始引入一个特殊的语法糖标记&lt;code&gt;@&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@spend
def hello():
    print &#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个spend呢，我们就将其称之为装饰器（Decorator）。&lt;/p&gt;

&lt;h2 id=&#34;装饰器的种类&#34;&gt;装饰器的种类&lt;/h2&gt;

&lt;h3 id=&#34;无参数装饰器&#34;&gt;无参数装饰器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def spend(func):
    def _spend(*args, **kwargs):
        start = time.time()
        func(*args, **kwargs)
        print &#39;Spend &#39;, time.time() - start
    return _spend

@spend
def hello(name):
    print &#39;Hello&#39;, name

# 等同于
def hello(name):
    print &#39;Hello&#39;, name
hello = spend(hello)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;有参数装饰器&#34;&gt;有参数装饰器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def spend(start):
    def _spend(func):
        def __spend(*args, **kwargs):
            func(*args, **kwargs)
            print &#39;Spend &#39;, time.time() - start
        return __spend
    return _spend

@spend(time.time())
def hello(name):
    print &#39;Hello&#39;, name

# 等同于
def hello(name):
    print &#39;Hello&#39;, name
hello = spend(time.time())(hello)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里有个问题，为什么spend的参数start能在hello中使用？&lt;/p&gt;

&lt;p&gt;我们从作用域的角度分析这个问题，举一个另外的例子。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def outer(arg):
    print locals()
    def inner():
        x = arg * arg
        print locals()
        print x
    return inner

&amp;gt;&amp;gt;&amp;gt; f = outer(2)
{&#39;arg&#39;: 2}
&amp;gt;&amp;gt;&amp;gt; f()
{&#39;x&#39;: 4, &#39;arg&#39;: 2}
4
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;locals函数的结果是局部命名空间的内容。在outer中，局部命名空间只有一个键arg，而在inner内部也有arg。这就引出了另外一个术语&lt;code&gt;闭包&lt;/code&gt;。在维基中，闭包的解释是这样的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。&lt;/p&gt;

&lt;p&gt;我的理解是，Python的装饰器就是一种闭包。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样，我们就能明白为什么spend的参数start能在hello中使用了。&lt;/p&gt;

&lt;h3 id=&#34;类装饰器&#34;&gt;类装饰器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def deco(*args, **kwargs):
    def _deco(cls):
        cls.x = 12
        return cls
    return _deco

@deco(&#39;hello&#39;)
class A(object):
    pass

&amp;gt;&amp;gt;&amp;gt; A.x
12

# 等同于
class A(object):
    pass
A = deco(&#39;hello&#39;)(A)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;装饰器类&#34;&gt;装饰器类&lt;/h3&gt;

&lt;p&gt;类作为装饰器，分为有参数和无参数。同时，需要装饰的是类方法时，需要用到&lt;strong&gt;get&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&#34;无参数&#34;&gt;无参数&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Deco(object):
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        print &#39;call Deco&#39;
        self.func(*args, **kwargs)

@Deco
def test():
    print &#39;call test&#39;

# 等同于
test = Deco(test)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;有参数&#34;&gt;有参数&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Deco(object):
    def __init__(self, *args, **kwargs):
        print args, kwargs

    def __call__(self, func):
        def _deco(*args, **kwargs):
            print &#39;call Deco&#39;
            func(*args, **kwargs)
        return _deco

@Deco(&#39;hello&#39;)
def test():
    print &#39;call test&#39;

# 等同于
test = Deco(&#39;hello&#39;)(func)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;内置装饰器&#34;&gt;内置装饰器&lt;/h2&gt;

&lt;p&gt;Python中有三个常用的内置装饰器，&lt;code&gt;staticmethod&lt;/code&gt;，&lt;code&gt;classmethod&lt;/code&gt;，&lt;code&gt;functools.wraps&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;staticmethod&#34;&gt;staticmethod&lt;/h3&gt;

&lt;p&gt;staticmethod返回一个静态方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Time(object):

    @staticmethod
    def now():
        print time.time()

t = Time()
t.now()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;classmethod&#34;&gt;classmethod&lt;/h3&gt;

&lt;p&gt;classmethod返回一个类方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Time(object):

    @classmethod
    def now():
        print time.time()

Time.now()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;functools-wraps&#34;&gt;functools.wraps&lt;/h3&gt;

&lt;p&gt;在使用装饰器的时候，返回的新函数的名称并不是原函数的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def spend(func):
    def _spend(*args, **kwargs):
        start = time.time()
        func(*args, **kwargs)
        print &#39;Spend &#39;, time.time() - start
    return _spend

@spend
def hello(name):
    print &#39;Hello&#39;, name

&amp;gt;&amp;gt;&amp;gt; print hello.__name__
_spend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要新函数的名称和原函数相同，functools.wraps就派上用场了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def spend(func):
    @functools.wraps(func)
    def _spend(*args, **kwargs):
        start = time.time()
        func(*args, **kwargs)
        print &#39;Spend &#39;, time.time() - start
    return _spend

@spend
def hello(name):
    print &#39;Hello&#39;, name

&amp;gt;&amp;gt;&amp;gt; print hello.__name__
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;假如有新的功能需要实现，但是又不想改变已有的逻辑代码，这时候就需要考虑考虑装饰器了。&lt;/p&gt;

&lt;p&gt;参考： &lt;a href=&#34;https://www.python.org/dev/peps/pep-0318/#warningwarningwarning&#34;&gt;PEP 318 &amp;ndash; Decorators for Functions and Methods&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mongo Introduction</title>
      <link>http://blog.titangroupco.com/post/mongo-introduction/</link>
      <pubDate>Thu, 19 Jan 2017 09:15:18 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/post/mongo-introduction/</guid>
      <description>

&lt;h1 id=&#34;introdution&#34;&gt;Introdution&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;No Need For ORM( Object Relational Mapping)&lt;/li&gt;
&lt;li&gt;Document(Record)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;54c955492b7c8eb21818bd09&amp;quot;),
   &amp;quot;address&amp;quot; : {
      &amp;quot;street&amp;quot; : &amp;quot;2 Avenue&amp;quot;,
      &amp;quot;zipcode&amp;quot; : &amp;quot;10075&amp;quot;,
      &amp;quot;building&amp;quot; : &amp;quot;1480&amp;quot;,
      &amp;quot;coord&amp;quot; : [ -73.9557413, 40.7720266 ]
   },
   &amp;quot;borough&amp;quot; : &amp;quot;Manhattan&amp;quot;,
   &amp;quot;cuisine&amp;quot; : &amp;quot;Italian&amp;quot;,
   &amp;quot;grades&amp;quot; : [
      {
         &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-10-01T00:00:00Z&amp;quot;),
         &amp;quot;grade&amp;quot; : &amp;quot;A&amp;quot;,
         &amp;quot;score&amp;quot; : 11
      },
      {
         &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-01-16T00:00:00Z&amp;quot;),
         &amp;quot;grade&amp;quot; : &amp;quot;B&amp;quot;,
         &amp;quot;score&amp;quot; : 17
      }
   ],
   &amp;quot;name&amp;quot; : &amp;quot;Vella&amp;quot;,
   &amp;quot;restaurant_id&amp;quot; : &amp;quot;41704620&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Collection(Table)&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;primary key: _id&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;connect-database&#34;&gt;Connect Database&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;mongo --host 192.168.0.238 --port 27017 -u demo -p 123456 --authenticationMechanism MONGODB-CR demo
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;insert&#34;&gt;Insert&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;# use database
use demo

# show tables
show tables

show collections

# insert
db.restaurants.insert(
   {
      &amp;quot;address&amp;quot; : {
         &amp;quot;street&amp;quot; : &amp;quot;2 Avenue&amp;quot;,
         &amp;quot;zipcode&amp;quot; : &amp;quot;10075&amp;quot;,
         &amp;quot;building&amp;quot; : &amp;quot;1480&amp;quot;,
         &amp;quot;coord&amp;quot; : [ -73.9557413, 40.7720266 ]
      },
      &amp;quot;borough&amp;quot; : &amp;quot;Manhattan&amp;quot;,
      &amp;quot;cuisine&amp;quot; : &amp;quot;Italian&amp;quot;,
      &amp;quot;grades&amp;quot; : [
         {
            &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-10-01T00:00:00Z&amp;quot;),
            &amp;quot;grade&amp;quot; : &amp;quot;A&amp;quot;,
            &amp;quot;score&amp;quot; : 11
         },
         {
            &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-01-16T00:00:00Z&amp;quot;),
            &amp;quot;grade&amp;quot; : &amp;quot;B&amp;quot;,
            &amp;quot;score&amp;quot; : 17
         }
      ],
      &amp;quot;name&amp;quot; : &amp;quot;Vella&amp;quot;,
      &amp;quot;restaurant_id&amp;quot; : &amp;quot;41704620&amp;quot;
   }
)

# after insert, return  WriteResult
WriteResult({ &amp;quot;nInserted&amp;quot; : 1 })

# or
var r = db.restaurants.insert(...)

# Three methods to insert
insert  insertOne  insertMany
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;find-or-query&#34;&gt;Find or Query&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find( { &amp;quot;address.zipcode&amp;quot;: &amp;quot;10075&amp;quot;, &amp;quot;borough&amp;quot;: &amp;quot;Manhattan&amp;quot;  } )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-query&#34;&gt;Array Query&lt;/h3&gt;

&lt;h4 id=&#34;exact-match&#34;&gt;Exact Match&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.users.find( { badges: [ &amp;quot;blue&amp;quot;, &amp;quot;black&amp;quot; ] } )

{
   &amp;quot;_id&amp;quot; : 1,
   &amp;quot;name&amp;quot; : &amp;quot;sue&amp;quot;,
   &amp;quot;age&amp;quot; : 19,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;P&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot;, &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 17, 3 ]
   &amp;quot;badges&amp;quot; : [ &amp;quot;blue&amp;quot;, &amp;quot;black&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 20 }, { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 10 } ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;match-an-array-element&#34;&gt;Match an Array Element&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.users.find( { badges: &amp;quot;black&amp;quot; } )

{
   &amp;quot;_id&amp;quot; : 1,
   &amp;quot;name&amp;quot; : &amp;quot;sue&amp;quot;,
   &amp;quot;age&amp;quot; : 19,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;P&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot;, &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 17, 3 ]
   &amp;quot;badges&amp;quot; : [ &amp;quot;blue&amp;quot;, &amp;quot;black&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 20 }, { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 10 } ]
}
{
   &amp;quot;_id&amp;quot; : 4,
   &amp;quot;name&amp;quot; : &amp;quot;xi&amp;quot;,
   &amp;quot;age&amp;quot; : 34,
   &amp;quot;type&amp;quot; : 2,
   &amp;quot;status&amp;quot; : &amp;quot;D&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;artist&amp;quot; : &amp;quot;Chagall&amp;quot;, &amp;quot;food&amp;quot; : &amp;quot;chocolate&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 5, 11 ],
   &amp;quot;badges&amp;quot; : [ &amp;quot;red&amp;quot;, &amp;quot;black&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 53, &amp;quot;bonus&amp;quot; : 15 }, { &amp;quot;points&amp;quot; : 51, &amp;quot;bonus&amp;quot; : 15 } ]
}
{
   &amp;quot;_id&amp;quot; : 6,
   &amp;quot;name&amp;quot; : &amp;quot;abc&amp;quot;,
   &amp;quot;age&amp;quot; : 43,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;A&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot;, &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 18, 12 ],
   &amp;quot;badges&amp;quot; : [ &amp;quot;black&amp;quot;, &amp;quot;blue&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 78, &amp;quot;bonus&amp;quot; : 8 }, { &amp;quot;points&amp;quot; : 57, &amp;quot;bonus&amp;quot; : 7 } ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;match-a-specific-element-of-an-array&#34;&gt;Match a Specific Element of an Array&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.users.find( { &amp;quot;badges.0&amp;quot;: &amp;quot;black&amp;quot; } )

{
   &amp;quot;_id&amp;quot; : 6,
   &amp;quot;name&amp;quot; : &amp;quot;abc&amp;quot;,
   &amp;quot;age&amp;quot; : 43,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;A&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot;, &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 18, 12 ],
   &amp;quot;badges&amp;quot; : [ &amp;quot;black&amp;quot;, &amp;quot;blue&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 78, &amp;quot;bonus&amp;quot; : 8 }, { &amp;quot;points&amp;quot; : 57, &amp;quot;bonus&amp;quot; : 7 } ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/tutorial/query-documents/#read-operations-arrays&#34;&gt;More&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;specify-conditions-with-operators&#34;&gt;Specify Conditions with Operators&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find( { &amp;quot;grades.score&amp;quot;: { $gt: 30 } } )
db.restaurants.find( { &amp;quot;grades.score&amp;quot;: { $lt: 10 } } )
db.restaurants.find( { &amp;quot;cuisine&amp;quot;: &amp;quot;Italian&amp;quot;, &amp;quot;address.zipcode&amp;quot;: &amp;quot;10075&amp;quot; } )
db.restaurants.find(
   { $or: [ { &amp;quot;cuisine&amp;quot;: &amp;quot;Italian&amp;quot; }, { &amp;quot;address.zipcode&amp;quot;: &amp;quot;10075&amp;quot; } ] }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/reference/operator/query/&#34;&gt;more&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;sort-query-results&#34;&gt;Sort Query Results&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find().sort( { &amp;quot;borough&amp;quot;: 1, &amp;quot;address.zipcode&amp;quot;: 1 } )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-partial-fields&#34;&gt;Show partial fields&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find({}, {borough: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pretty-results&#34;&gt;Pretty results&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find().pretty()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;update&#34;&gt;Update&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.update(
    { &amp;quot;name&amp;quot; : &amp;quot;Juni&amp;quot; },
    {
      $set: { &amp;quot;cuisine&amp;quot;: &amp;quot;American (New)&amp;quot; },
      $currentDate: { &amp;quot;lastModified&amp;quot;: true }
    }
)

db.restaurants.update(
  { &amp;quot;restaurant_id&amp;quot; : &amp;quot;41156888&amp;quot; },
  { $set: { &amp;quot;address.street&amp;quot;: &amp;quot;East 31st Street&amp;quot; } }
)

db.restaurants.update(
  { &amp;quot;address.zipcode&amp;quot;: &amp;quot;10016&amp;quot;, cuisine: &amp;quot;Other&amp;quot; },
  {
    $set: { cuisine: &amp;quot;Category To Be Determined&amp;quot; },
    $currentDate: { &amp;quot;lastModified&amp;quot;: true }
  },
  { multi: true, upsert: true}
)

db.restaurants.update(
   { &amp;quot;restaurant_id&amp;quot; : &amp;quot;41704620&amp;quot; },
   {
     &amp;quot;name&amp;quot; : &amp;quot;Vella 2&amp;quot;,
     &amp;quot;address&amp;quot; : {
              &amp;quot;coord&amp;quot; : [ -73.9557413, 40.7720266 ],
              &amp;quot;building&amp;quot; : &amp;quot;1480&amp;quot;,
              &amp;quot;street&amp;quot; : &amp;quot;2 Avenue&amp;quot;,
              &amp;quot;zipcode&amp;quot; : &amp;quot;10075&amp;quot;
     }
   }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;自增id的实现&#34;&gt;自增ID的实现&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;collection store id&lt;/li&gt;
&lt;li&gt;$inc operator&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.ids.insert({name: &#39;test&#39;, value: NumberInt(0)})
db.ids.update({name: &#39;test&#39;}, {$inc: {value: 1}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/reference/operator/update/&#34;&gt;more&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;remove&#34;&gt;Remove&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.remove( { &amp;quot;borough&amp;quot;: &amp;quot;Manhattan&amp;quot; } )
db.restaurants.remove( { &amp;quot;borough&amp;quot;: &amp;quot;Queens&amp;quot; }, { justOne: true } )
db.restaurants.remove( { } )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-collection&#34;&gt;Drop collection&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.drop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;data-aggregation&#34;&gt;Data Aggregation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.collection.aggregate( [ &amp;lt;stage1&amp;gt;, &amp;lt;stage2&amp;gt;, ... ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;group&#34;&gt;Group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.aggregate(
   [
     { $group: { &amp;quot;_id&amp;quot;: &amp;quot;$borough&amp;quot;, &amp;quot;count&amp;quot;: { $sum: 1 } } }
   ]
)

{ &amp;quot;_id&amp;quot; : &amp;quot;Staten Island&amp;quot;, &amp;quot;count&amp;quot; : 969 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Brooklyn&amp;quot;, &amp;quot;count&amp;quot; : 6086 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Manhattan&amp;quot;, &amp;quot;count&amp;quot; : 10259 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Queens&amp;quot;, &amp;quot;count&amp;quot; : 5656 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Bronx&amp;quot;, &amp;quot;count&amp;quot; : 2338 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Missing&amp;quot;, &amp;quot;count&amp;quot; : 51 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filter-and-group&#34;&gt;Filter and Group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.aggregate(
   [
     { $match: { &amp;quot;borough&amp;quot;: &amp;quot;Queens&amp;quot;, &amp;quot;cuisine&amp;quot;: &amp;quot;Brazilian&amp;quot; } },
     { $group: { &amp;quot;_id&amp;quot;: &amp;quot;$address.zipcode&amp;quot; , &amp;quot;count&amp;quot;: { $sum: 1 } } }
   ]
)

{ &amp;quot;_id&amp;quot; : &amp;quot;11368&amp;quot;, &amp;quot;count&amp;quot; : 1 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11106&amp;quot;, &amp;quot;count&amp;quot; : 3 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11377&amp;quot;, &amp;quot;count&amp;quot; : 1 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11103&amp;quot;, &amp;quot;count&amp;quot; : 1 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11101&amp;quot;, &amp;quot;count&amp;quot; : 2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.collection.mapReduce(
                         &amp;lt;map&amp;gt;,
                         &amp;lt;reduce&amp;gt;,
                         {
                           out: &amp;lt;collection&amp;gt;,
                           query: &amp;lt;document&amp;gt;,
                           sort: &amp;lt;document&amp;gt;,
                           limit: &amp;lt;number&amp;gt;,
                           finalize: &amp;lt;function&amp;gt;,
                           scope: &amp;lt;document&amp;gt;,
                           jsMode: &amp;lt;boolean&amp;gt;,
                           verbose: &amp;lt;boolean&amp;gt;,
                           bypassDocumentValidation: &amp;lt;boolean&amp;gt;
                         }
                       )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map-function&#34;&gt;Map Function&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function() {
   ...
   emit(key, value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The map function has the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the map function, reference the current document as this within the function.&lt;/li&gt;
&lt;li&gt;The map function should not access the database for any reason.&lt;/li&gt;
&lt;li&gt;The map function should be pure, or have no impact outside of the function (i.e. side effects.)&lt;/li&gt;
&lt;li&gt;A single emit can only hold half of MongoDB’s maximum BSON document size.&lt;/li&gt;
&lt;li&gt;The map function may optionally call emit(key,value) any number of times to create an output document associating key with value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following map function will call emit(key,value) either 0 or 1 times depending on the value of the input document’s status field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function() {
    if (this.status == &#39;A&#39;)
        emit(this.cust_id, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following map function may call emit(key,value) multiple times depending on the number of elements in the input document’s items field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function() {
    this.items.forEach(function(item){ emit(item.sku, 1); });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reduce-function&#34;&gt;Reduce Function&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function(key, values) {
   ...
   return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reduce function exhibits the following behaviors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The reduce function should not access the database, even to perform read operations.&lt;/li&gt;
&lt;li&gt;The reduce function should not affect the outside system.&lt;/li&gt;
&lt;li&gt;MongoDB will not call the reduce function for a key that has only a single value. The values argument is an array whose elements are the value objects that are “mapped” to the key.&lt;/li&gt;
&lt;li&gt;MongoDB can invoke the reduce function more than once for the same key. In this case, the previous output from the reduce function for that key will become one of the input values to the next reduce function invocation for that key.&lt;/li&gt;
&lt;li&gt;The reduce function can access the variables defined in the scope parameter.&lt;/li&gt;
&lt;li&gt;The inputs to reduce must not be larger than half of MongoDB’s maximum BSON document size. This requirement may be violated when large documents are returned and then joined together in subsequent reduce steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;reduce(key, [ C, reduce(key, [ A, B ]) ] ) == reduce( key, [ C, A, B ] )
reduce( key, [ reduce(key, valuesArray) ] ) == reduce( key, valuesArray )
reduce( key, [ A, B ] ) == reduce( key, [ B, A ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
     _id: ObjectId(&amp;quot;50a8240b927d5d8b5891743c&amp;quot;),
     cust_id: &amp;quot;abc123&amp;quot;,
     ord_date: new Date(&amp;quot;Oct 04, 2012&amp;quot;),
     status: &#39;A&#39;,
     price: 25,
     items: [ { sku: &amp;quot;mmm&amp;quot;, qty: 5, price: 2.5 },
              { sku: &amp;quot;nnn&amp;quot;, qty: 5, price: 2.5 } ]
}

var mapFunction1 = function() {
                       emit(this.cust_id, this.price);
                   };
var reduceFunction1 = function(keyCustId, valuesPrices) {
                          return Array.sum(valuesPrices);
                      };
db.orders.mapReduce(
                     mapFunction1,
                     reduceFunction1,
                     { out: &amp;quot;map_reduce_example&amp;quot; }
                   )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Prototype</title>
      <link>http://blog.titangroupco.com/post/js-prototype/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/post/js-prototype/</guid>
      <description>

&lt;p&gt;&lt;em&gt;note of &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes&#34;&gt;You Don&amp;rsquo;t know JS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-types-in-javascript&#34;&gt;Data types in Javascript&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Javascript has 6 primitive data(immutable) types
typeof 3.14  // &#39;number&#39;;
typeof &#39;bla&#39;  // &#39;string&#39;;
typeof true  // &#39;boolean&#39;
typeof Symbol.iterator  // &#39;symbol&#39;
typeof undefined  // &#39;undefined&#39;
typeof null  // &#39;object&#39;

// and object
typeof {a:1}  // &#39;object&#39;
typeof function fn(){}  // &#39;function&#39;, it&#39;s in fact an object with special type tag


// object has sub type
Object.prototype.toString.call(fn)  // &#39;[object Function]&#39;

// primitive types have object equivalent that wrap around them.
Object.prototype.toString.call(3.14)  // &#39;[object Number]&#39;
Object.prototype.toString.call(&#39;bla&#39;)  // &#39;[object String]&#39;
Object.prototype.toString.call(true)  // &#39;[object Boolean]&#39;
Object.prototype.toString.call(Symbol.iterator)  // &#39;[object Symbol]&#39;

Object.prototype.toString.call({})  // &#39;[object Object]&#39;
Object.prototype.toString.call([])  // &#39;[object Array]&#39;
Object.prototype.toString.call(/[a-zA-Z]+/)  // &#39;[object RegExp]&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is not an object for it has no any property.&lt;/p&gt;

&lt;p&gt;for why &lt;code&gt;typeof null === &#39;object&#39;&lt;/code&gt; see details &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#null&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;object-property&#34;&gt;Object property&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myObject = {
    a: 2
};

// `in` operator will check upwards the whole prototype chain
(&#39;a&#39; in myObject) // true
(&#39;toString&#39; in myObject) // true
// `hasOwnProperty` function check only `this` object
(myObject.hasOwnProperty(&#39;toString&#39;))  // false

// property has characteristics decribed by sth called `descriptor`
Object.getOwnPropertyDescriptor( myObject, &amp;quot;a&amp;quot; );
// {
//    value: 2,
//    writable: true,
//    enumerable: true,
//    configurable: true
// }

// another way to define property
Object.defineProperty( myObject, &amp;quot;a&amp;quot;, {
    value: 2,
    writable: true,
    configurable: true,
    enumerable: true
} );

// prevent an object from having new properties added to it
Object.preventExtensions( myObject );

Object.seal(..) 
// Object.preventExtensions(..) + marks all its existing properties as configurable:false.

Object.freeze(..)
// Object.seal(..) + marks all &amp;quot;data accessor&amp;quot; properties as writable:false

// descriptor includes data descriptor and accessor descriptor
Object.defineProperty(
    myObject,   // target
    &amp;quot;b&amp;quot;,        // property name
    {           // descriptor
        // define a getter for `b`
        get: function(){ return this.a * 2 },

        // make sure `b` shows up as an object property
        enumerable: true
    }
);

myObject.b;  // 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-is-this&#34;&gt;What is &lt;code&gt;this&lt;/code&gt;?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function dcyy() {
  console.log(this.name, &#39;到此一游 :(&#39;);
}
var name = &#39;global&#39;;
var zs = {
  name: &#39;张三&#39;,
  dcyy
}
var ls = {
  name: &#39;李四&#39;
}

dcyy();  // global 到此一游 :(
zs.dcyy();  // &#39;张三 到此一游 :(
dcyy.call(ls);  // 李四 到此一游 :(
new dcyy();
// undefined &#39;到此一游 :(&#39;
// dcyy {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is not an author-time binding but a runtime binding.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Called with new? Use the newly constructed object.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Called with &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; (or &lt;code&gt;bind&lt;/code&gt;)? Use the specified object.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Called with a context object owning the call? Use that context object.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Default: undefined in strict mode, global object otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;prototype-chain&#34;&gt;Prototype Chain&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Foo() {
    // ...
}

var a = new Foo();

Object.getPrototypeOf( a ) === Foo.prototype; // true

a.__proto__ === Foo.prototype;  // true

Foo.prototype.isPrototypeOf(a);  // true

var p = {
    sayHi: function () {
        console.log(&#39;hi!&#39;);
    }
}
var c = Object.create(p);
c.sayHi();  // &#39;hi!&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, when u create an object use &lt;code&gt;new&lt;/code&gt; operator and a function say &lt;em&gt;fn&lt;/em&gt;, the prototype of this created object is &lt;code&gt;fn.prototype&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;You Dont Know JS&lt;/code&gt; advocates prototype pattern which is the foundation of JS, objects OO simulation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Vue</title>
      <link>http://blog.titangroupco.com/post/vue-introduction/</link>
      <pubDate>Mon, 31 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/post/vue-introduction/</guid>
      <description>

&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
  {{ message }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var app = new Vue({
  el: &#39;#app&#39;,
  data: {
    message: &#39;Hello Vue!&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vue inherits a lot from angular. Both has concept of &lt;code&gt;directives&lt;/code&gt; and &lt;code&gt;components&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will skip those similarities, but focus on differences here.&lt;/p&gt;

&lt;h3 id=&#34;directive-has-modifier-and-arguments&#34;&gt;Directive has Modifier and Arguments&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input v-model.number=&amp;quot;age&amp;quot; type=&amp;quot;number&amp;quot;&amp;gt;
&amp;lt;a v-bind:href=&amp;quot;url&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way.&lt;/li&gt;
&lt;li&gt;Some directives can take an “argument”, denoted by a colon after the directive name.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;component-has-slots&#34;&gt;Component has slots&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://p1.bpimg.com/567571/d8c7009a5bc6f77a.jpg&#34; alt=&#34;slot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The API for a Vue component comes in three parts - props, events, and slots:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Props allow the external environment to pass data into the component&lt;/li&gt;
&lt;li&gt;Events allow the component to trigger side effects in the external environment&lt;/li&gt;
&lt;li&gt;Slots allow the external environment to compose the component with extra content.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;my-component
  v-bind:foo=&amp;quot;baz&amp;quot;
  v-bind:bar=&amp;quot;qux&amp;quot;
  v-on:event-a=&amp;quot;doThis&amp;quot;
  v-on:event-b=&amp;quot;doThat&amp;quot;
&amp;gt;
  &amp;lt;img slot=&amp;quot;icon&amp;quot; src=&amp;quot;...&amp;quot;&amp;gt;
  &amp;lt;p slot=&amp;quot;main-text&amp;quot;&amp;gt;Hello!&amp;lt;/p&amp;gt;
&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vue-ecosystem&#34;&gt;Vue Ecosystem&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://router.vuejs.org/&#34;&gt;vue-router&lt;/a&gt; is officially-supported&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://vuex.vuejs.org/&#34;&gt;vuex&lt;/a&gt; is a state management pattern + library for Vue.js applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Angular&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Angular 2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;React&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Vue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Star(Github)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;53015&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;17748&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;52844&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32113&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Fork(Github)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;26177&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4525&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9306&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3645&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Issue(on/off)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;sup&gt;674&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7460&lt;/sub&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;sup&gt;811&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6964&lt;/sub&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;sup&gt;484&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3336&lt;/sub&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;sup&gt;66&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3069&lt;/sub&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Size&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;156K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;636K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;150K&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64K&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LOC(TodoMVC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;442&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;198&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;520&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;221&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Size(TodoMVC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.1M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.6M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.2M&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;294K&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;created on 10/31/2016&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular 2 requires Typescript while others require Javascript.&lt;/li&gt;
&lt;li&gt;Angular 2, React and Vue support cross-platform programming.&lt;/li&gt;
&lt;li&gt;Angular offer more features. But React and Vue get enhancement from
additional libraries, which is authored and supported by community.&lt;/li&gt;
&lt;li&gt;From the metric above, Vue has the smallest community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://vuejs.org/guide/comparison.html&#34;&gt;Read more&lt;/a&gt; on differences among these front-end Javascript frameworks.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href=&#34;https://github.com/vuejs/vue-cli&#34;&gt;vue-cli&lt;/a&gt; to scaffold Vue.js projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack</title>
      <link>http://blog.titangroupco.com/post/webpack/</link>
      <pubDate>Fri, 28 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/post/webpack/</guid>
      <description>

&lt;h2 id=&#34;motivation-or-problems&#34;&gt;Motivation or Problems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are multiple standards of module system in JS world including CommonJS, AMD, ES6 modules and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag style.&lt;/li&gt;
&lt;li&gt;There are two extremes when transferring modules

&lt;ol&gt;
&lt;li&gt;one request per module&lt;/li&gt;
&lt;li&gt;All modules in one request&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Why should a module system only help the developer with JavaScript?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;io&#34;&gt;IO&lt;/h2&gt;

&lt;p&gt;Webpack is a module bundler.&lt;/p&gt;

&lt;p&gt;It takes a bunch of files, treating each as a module, figuring out the dependencies between them, and bundle them into static assets that are ready for deployment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dtinth.github.io/webpack-docs-images/usage/how-it-works.png&#34; alt=&#34;what webpack does&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-concepts-of-webpack&#34;&gt;Some concepts of Webpack&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;chunk: A batch of modules that bundled into one single file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;loader: Transformations that are applied on a resource file(module) of your app.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;plugin: Add functionality typically related to bundles in webpack.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;some-plugins&#34;&gt;Some plugins&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DefinePlugin: Allows you to create global constants which can be configured at compile time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HotModuleReplacementPlugin: Enables Hot Module Replacement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HtmlWebpackPlugin: Generates a solid base html page for your web application with all your webpack generated css and js files built in.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CommonsChunkPlugin: Generate an extra chunk, which contains common modules shared between entry points.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UglifyJsPlugin: Minimize all JavaScript output of chunks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ExtractTextPlugin: Extract text from bundle into a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example-of-webpack-configuration&#34;&gt;Example of Webpack configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;notice comments start with hash character&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  ...
  module: {
    ...
    loaders: [
      # They are functions that take the source of a resource file as the parameter
      # and return the new source.
      { test: /\.less$/,
        loader: &#39;css-loader!less-loader&#39; },
      { test: /\.js$/,
        loader: &#39;babel&#39;,
        include: &#39;/path-to-your-project/vue-webpack&#39;,
        exclude: /node_modules/ },
      ...
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>