<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://blog.titangroupco.com/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [DevTeam](mailto:dev@titangroupco.com) of Titan.</copyright>
    <lastBuildDate>Wed, 22 Nov 2017 17:03:51 +0800</lastBuildDate>
    
	<atom:link href="http://blog.titangroupco.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>tensorflow学习笔记-模型包装</title>
      <link>http://blog.titangroupco.com/2017/11/22/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E5%9E%8B%E5%8C%85%E8%A3%85/</link>
      <pubDate>Wed, 22 Nov 2017 17:03:51 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/11/22/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E5%9E%8B%E5%8C%85%E8%A3%85/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;tf的模型可以自己完全手写，用tensorflow提供的底层API自己手写，对于tf底层API比较熟悉可以这样，也可以采用tf的高阶API来编写自己的模型，比如用内置模块&lt;strong&gt;tf.estimator&lt;/strong&gt;，本文主要介绍后者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>振动分析AI实践</title>
      <link>http://blog.titangroupco.com/2017/11/22/%E6%8C%AF%E5%8A%A8%E5%88%86%E6%9E%90ai%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 22 Nov 2017 17:03:51 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/11/22/%E6%8C%AF%E5%8A%A8%E5%88%86%E6%9E%90ai%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;相关背景&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;浙江胄天科技公司研发的风电设备全生命周期管理平台去年已经上线了风电故障自动分析模块，该模块将风电领域常见的各故障的分析策略提取成领域算法，整合到PLM平台上，对风电CMS实时数据进行自动分析，一旦发现故障，会报警实时通知到分析师，然后分析师进行进一步的故障诊断。&lt;/p&gt;

&lt;p&gt;自动分析模块提高了分析师的分析效率，对于少数分析策略比较简单的故障类型，比如不对中故障，自动分析的效率提升是非常可观的，但是随着故障分析需求不断增加，如故障类型的增加，分析策略的复杂度提高，该模块也逐渐暴露出一些不足之处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;策略的规则逻辑来自分析师的领域知识，策略的针对性相对较强，故而通用性相对较弱，不同故障类型的分析策略差别较大。&lt;/li&gt;
&lt;li&gt;将分析师的分析策略提取成领域算法的代价较高，对于逻辑复杂的策略，需要分析师和软件工程师进行反复的沟通，编码，实现，验证，才能达到预期的效果。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jmeter introduce</title>
      <link>http://blog.titangroupco.com/2017/03/07/jmeter-introduce/</link>
      <pubDate>Tue, 07 Mar 2017 10:44:56 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/03/07/jmeter-introduce/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://blog.titangroupco.com/img/jmeter.jpg&#34; alt=&#34;Jmeter&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>javascript events</title>
      <link>http://blog.titangroupco.com/2017/03/03/javascript-events/</link>
      <pubDate>Fri, 03 Mar 2017 10:34:39 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/03/03/javascript-events/</guid>
      <description>&lt;h1 id=&#34;javascript事件机制&#34;&gt;JavaScript事件机制&lt;/h1&gt;

&lt;p&gt;事件是实现页面交互的常用手段，在浏览器环境下的事件主要由DOM、BOM事件类型组成。&lt;/p&gt;

&lt;h2 id=&#34;一-什么是事件&#34;&gt;一、什么是事件&lt;/h2&gt;

&lt;p&gt;事件就是文档、浏览器窗口中发生的一些特定的交互瞬间，一般是由用户主动触发，在事件被触发之后，可以根据是否预先绑定了事件处理程序来决定如何对这个事件的发生做出反应。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>界面设计中的文字</title>
      <link>http://blog.titangroupco.com/2017/03/02/%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/</link>
      <pubDate>Thu, 02 Mar 2017 09:26:01 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/03/02/%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://blog.titangroupco.com/img/head.png&#34; alt=&#34;image&#34; /&gt;&lt;br /&gt;
文字是界面设计中重要而又容易被忽略的部分。&lt;/p&gt;

&lt;h3 id=&#34;字体&#34;&gt;字体&lt;/h3&gt;

&lt;p&gt;不同操作系统、不同游览器默认显示的字体是不一样的。&lt;br /&gt;
&lt;em&gt;Windows：&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;宋体（simsun）&lt;/strong&gt; windows下大部分浏览器的默认字体，在使用大字号时的显示效果比较糟糕。&lt;br /&gt;
&lt;strong&gt;微软雅黑（MicrosoftYahei）&lt;/strong&gt; 一款拥有regular、bold两种粗细字重的无衬线黑体类字体，显著提高了字体的显示效果，且win8开始有加入了light的字重，这款字体就越来越被设计师、开发人员所选择。&lt;br /&gt;
&lt;strong&gt;Arial&lt;/strong&gt; 为win平台默认的无衬线西文字体，显示效果一般。&lt;br /&gt;
&lt;strong&gt;Tahoma&lt;/strong&gt; 也是十分常见的无衬线字体，显示效果比Arial好一些。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Web Server Gateway Interface</title>
      <link>http://blog.titangroupco.com/2017/02/21/python-web-server-gateway-interface/</link>
      <pubDate>Tue, 21 Feb 2017 09:15:24 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/02/21/python-web-server-gateway-interface/</guid>
      <description>&lt;h1 id=&#34;引言&#34;&gt;引言&lt;/h1&gt;

&lt;p&gt;在Python的Web开发界，有着多种多样的框架，比如Flask, Django, Falcon等等，可谓是百花齐放。许多新入门的同学，都会纠结使用哪个框架比较好。在这里 我们不去回答这个问题，而是去寻找它们的共通点，也就是本篇的主题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Web Server Gateway Interface (WSGI, 可以分开来读, 也可以读作&#39;wiz-gee&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;wsgi是什么&#34;&gt;WSGI是什么&lt;/h1&gt;

&lt;p&gt;WSGI不是一个框架，也不是一个Python的库，也不是服务，API或者其他任何类型的软件。它只是服务(&lt;code&gt;Web Server&lt;/code&gt;)和应用(&lt;code&gt;Web Application&lt;/code&gt;)之间的一种简单通用的接口规范。它定义了服务和应用两端，除此之外还有一种叫中间件(&lt;code&gt;Middleware&lt;/code&gt;)的组件，它同时实现了服务端和应用端。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果一个应用满足了WSGI，那么它就能在所有满足WSGI的服务上跑起来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Application&lt;/code&gt;处理请求，并返回处理的结果。它是一个可调用(&lt;code&gt;callable&lt;/code&gt;)的对象，可以是一个函数，方法，实现了&lt;code&gt;__call__&lt;/code&gt;或者&lt;code&gt;__iter__&lt;/code&gt;方法的类。&lt;/p&gt;

&lt;h4 id=&#34;函数&#34;&gt;函数&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def app(environ, start_response):
    start_response(&#39;200 OK&#39;, [(&#39;Content-type&#39;, &#39;text/plain&#39;)])
    return [&#39;Hello world!&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>D3 入门教程</title>
      <link>http://blog.titangroupco.com/2017/01/24/d3-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Tue, 24 Jan 2017 16:50:51 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/24/d3-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;1-数据可视化&#34;&gt;1. 数据可视化&lt;/h1&gt;

&lt;p&gt;数据可视化，是关于数据视觉表现形式的科学技术研究。为了使复杂的数据和文字变得更容易理解，各种可视化工具因此诞生，其中D3 正是其中的佼佼者。
&lt;img src=&#34;http://www.ourd3js.com/wordpress/wp-content/uploads/2014/06/14.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;2-d3-简介&#34;&gt;2. D3 简介&lt;/h1&gt;

&lt;p&gt;D3 的全称是（Data-Driven Documents），字面意思是一个被数据驱动的文档。听名字有点抽象，说简单一点，其实就是一个 JavaScript 的函数库，使用它主要是用来做数据可视化的。&lt;/p&gt;

&lt;h1 id=&#34;3-基本用法&#34;&gt;3. 基本用法&lt;/h1&gt;

&lt;h2 id=&#34;3-1-选择元素&#34;&gt;3.1 选择元素&lt;/h2&gt;

&lt;p&gt;在 D3 中，用于选择元素的函数有两个，函数接收符合CSS选择器条件的字符串：
- d3.select()：是选择所有指定元素的第一个
- d3.selectAll()：是选择指定元素的全部&lt;/p&gt;

&lt;p&gt;这两个函数返回的结果称为选择集。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>前端使用websocket的问题</title>
      <link>http://blog.titangroupco.com/2017/01/22/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8websocket%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 22 Jan 2017 18:11:48 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/22/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8websocket%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;websocket相关概念&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WebSocket&#34;&gt;websocket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;随着互联网的发展，传统的HTTP协议已经很难满足Web应用日益复杂的需求了。近年来，随着HTML5的诞生，WebSocket协议被提出，它实现了浏览器与服务器的全双工通信，扩展了浏览器与服务端的通信功能，使服务端也能主动向客户端发送数据。
IE10以上才支持HTML5，才支持websocket，chrome，火狐，opera等浏览器支持较好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://socket.io/&#34;&gt;Socket.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;WebSocket是HTML5的一种新通信协议，它实现了浏览器与服务器之间的双向通讯。而Socket.IO是一个完全由JavaScript实现、基于Node.js、支持WebSocket的协议用于实时通信、跨平台的开源框架，它包括了&lt;strong&gt;客户端的JavaScript&lt;/strong&gt;和&lt;strong&gt;服务器端的Node.js&lt;/strong&gt;。
Socket.IO是一个跨平台，支持多种连接方式，如websocket，flashsocket,ajax等，如果客户端不支持websocket时，可以切换使用其他链接方式，比如ajax轮询等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RF中页面元素定位</title>
      <link>http://blog.titangroupco.com/2017/01/22/rf%E4%B8%AD%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Sun, 22 Jan 2017 17:03:51 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/22/rf%E4%B8%AD%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/</guid>
      <description>&lt;h1 id=&#34;rf中页面元素定位&#34;&gt;RF中页面元素定位&lt;/h1&gt;

&lt;h3 id=&#34;1-robot-framework-selenium做ui自动化测试&#34;&gt;1.Robot Framework+selenium做UI自动化测试&lt;/h3&gt;

&lt;h3 id=&#34;2-页面元素定位&#34;&gt;2.页面元素定位&lt;/h3&gt;

&lt;h3 id=&#34;2-1-id和name定位&#34;&gt;2.1 id和name定位&lt;/h3&gt;

&lt;p&gt;假如把一个元素看作一个人的话，id 和name可以看作一个人的身份证号和姓名。当然，这些属性值是否唯一要看前端工程师如何设计了。&lt;/p&gt;

&lt;p&gt;百度搜索框和搜索按钮&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;s_ipt&amp;quot; ==name=&amp;quot;wd&amp;quot;== id=&amp;quot;kw&amp;quot; maxlength=&amp;quot;100&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;

&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;百度一下&amp;quot; ==id=&amp;quot;su&amp;quot;== class=&amp;quot;btn self-btn bg s_btn&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Decorator</title>
      <link>http://blog.titangroupco.com/2017/01/22/python-decorator/</link>
      <pubDate>Sun, 22 Jan 2017 13:20:36 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/22/python-decorator/</guid>
      <description>&lt;h2 id=&#34;什么是装饰器&#34;&gt;什么是装饰器&lt;/h2&gt;

&lt;p&gt;在coding的时候，你经常会需要计算一个函数的执行时间，最容易想到的方法是在每个函数内部进行计算。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello():
    start = time.time()
    print &#39;Hello&#39;
    print &#39;Spend &#39;, time.time() - start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也有可能是在函数外部计算时间。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mongo Introduction</title>
      <link>http://blog.titangroupco.com/2017/01/19/mongo-introduction/</link>
      <pubDate>Thu, 19 Jan 2017 09:15:18 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/19/mongo-introduction/</guid>
      <description>&lt;h1 id=&#34;introdution&#34;&gt;Introdution&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;No Need For ORM( Object Relational Mapping)&lt;/li&gt;
&lt;li&gt;Document(Record)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript Prototype</title>
      <link>http://blog.titangroupco.com/2017/01/05/javascript-prototype/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/05/javascript-prototype/</guid>
      <description>&lt;p&gt;&lt;em&gt;note of &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes&#34;&gt;You Don&amp;rsquo;t know JS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-types-in-javascript&#34;&gt;Data types in Javascript&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Javascript has 6 primitive data(immutable) types
typeof 3.14  // &#39;number&#39;;
typeof &#39;bla&#39;  // &#39;string&#39;;
typeof true  // &#39;boolean&#39;
typeof Symbol.iterator  // &#39;symbol&#39;
typeof undefined  // &#39;undefined&#39;
typeof null  // &#39;object&#39;

// and object
typeof {a:1}  // &#39;object&#39;
typeof function fn(){}  // &#39;function&#39;, it&#39;s in fact an object with special type tag


// object has sub type
Object.prototype.toString.call(fn)  // &#39;[object Function]&#39;

// primitive types have object equivalent that wrap around them.
Object.prototype.toString.call(3.14)  // &#39;[object Number]&#39;
Object.prototype.toString.call(&#39;bla&#39;)  // &#39;[object String]&#39;
Object.prototype.toString.call(true)  // &#39;[object Boolean]&#39;
Object.prototype.toString.call(Symbol.iterator)  // &#39;[object Symbol]&#39;

Object.prototype.toString.call({})  // &#39;[object Object]&#39;
Object.prototype.toString.call([])  // &#39;[object Array]&#39;
Object.prototype.toString.call(/[a-zA-Z]+/)  // &#39;[object RegExp]&#39;

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Vue</title>
      <link>http://blog.titangroupco.com/2016/10/31/introduction-to-vue/</link>
      <pubDate>Mon, 31 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2016/10/31/introduction-to-vue/</guid>
      <description>&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
  {{ message }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var app = new Vue({
  el: &#39;#app&#39;,
  data: {
    message: &#39;Hello Vue!&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Webpack</title>
      <link>http://blog.titangroupco.com/2016/10/28/webpack/</link>
      <pubDate>Fri, 28 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2016/10/28/webpack/</guid>
      <description>&lt;h2 id=&#34;motivation-or-problems&#34;&gt;Motivation or Problems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are multiple standards of module system in JS world including CommonJS, AMD, ES6 modules and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag style.&lt;/li&gt;
&lt;li&gt;There are two extremes when transferring modules

&lt;ol&gt;
&lt;li&gt;one request per module&lt;/li&gt;
&lt;li&gt;All modules in one request&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Why should a module system only help the developer with JavaScript?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;io&#34;&gt;IO&lt;/h2&gt;

&lt;p&gt;Webpack is a module bundler.&lt;/p&gt;

&lt;p&gt;It takes a bunch of files, treating each as a module, figuring out the dependencies between them, and bundle them into static assets that are ready for deployment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dtinth.github.io/webpack-docs-images/usage/how-it-works.png&#34; alt=&#34;what webpack does&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>