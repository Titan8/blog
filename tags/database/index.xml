<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on </title>
    <link>http://blog.titangroupco.com/tags/database/index.xml</link>
    <description>Recent content in Database on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [DevTeam](mailto:dev@titangroupco.com) of Titan.</copyright>
    <atom:link href="http://blog.titangroupco.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mongo Introduction</title>
      <link>http://blog.titangroupco.com/2017/01/19/mongo-introduction</link>
      <pubDate>Thu, 19 Jan 2017 09:15:18 +0800</pubDate>
      
      <guid>http://blog.titangroupco.com/2017/01/19/mongo-introduction</guid>
      <description>&lt;h1 id=&#34;introdution&#34;&gt;Introdution&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;No Need For ORM( Object Relational Mapping)&lt;/li&gt;
&lt;li&gt;Document(Record)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;54c955492b7c8eb21818bd09&amp;quot;),
   &amp;quot;address&amp;quot; : {
      &amp;quot;street&amp;quot; : &amp;quot;2 Avenue&amp;quot;,
      &amp;quot;zipcode&amp;quot; : &amp;quot;10075&amp;quot;,
      &amp;quot;building&amp;quot; : &amp;quot;1480&amp;quot;,
      &amp;quot;coord&amp;quot; : [ -73.9557413, 40.7720266 ]
   },
   &amp;quot;borough&amp;quot; : &amp;quot;Manhattan&amp;quot;,
   &amp;quot;cuisine&amp;quot; : &amp;quot;Italian&amp;quot;,
   &amp;quot;grades&amp;quot; : [
      {
         &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-10-01T00:00:00Z&amp;quot;),
         &amp;quot;grade&amp;quot; : &amp;quot;A&amp;quot;,
         &amp;quot;score&amp;quot; : 11
      },
      {
         &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-01-16T00:00:00Z&amp;quot;),
         &amp;quot;grade&amp;quot; : &amp;quot;B&amp;quot;,
         &amp;quot;score&amp;quot; : 17
      }
   ],
   &amp;quot;name&amp;quot; : &amp;quot;Vella&amp;quot;,
   &amp;quot;restaurant_id&amp;quot; : &amp;quot;41704620&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Collection(Table)&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;primary key: _id&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;connect-database&#34;&gt;Connect Database&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;mongo --host 192.168.0.238 --port 27017 -u demo -p 123456 --authenticationMechanism MONGODB-CR demo
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;insert&#34;&gt;Insert&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;# use database
use demo

# show tables
show tables

show collections

# insert
db.restaurants.insert(
   {
      &amp;quot;address&amp;quot; : {
         &amp;quot;street&amp;quot; : &amp;quot;2 Avenue&amp;quot;,
         &amp;quot;zipcode&amp;quot; : &amp;quot;10075&amp;quot;,
         &amp;quot;building&amp;quot; : &amp;quot;1480&amp;quot;,
         &amp;quot;coord&amp;quot; : [ -73.9557413, 40.7720266 ]
      },
      &amp;quot;borough&amp;quot; : &amp;quot;Manhattan&amp;quot;,
      &amp;quot;cuisine&amp;quot; : &amp;quot;Italian&amp;quot;,
      &amp;quot;grades&amp;quot; : [
         {
            &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-10-01T00:00:00Z&amp;quot;),
            &amp;quot;grade&amp;quot; : &amp;quot;A&amp;quot;,
            &amp;quot;score&amp;quot; : 11
         },
         {
            &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-01-16T00:00:00Z&amp;quot;),
            &amp;quot;grade&amp;quot; : &amp;quot;B&amp;quot;,
            &amp;quot;score&amp;quot; : 17
         }
      ],
      &amp;quot;name&amp;quot; : &amp;quot;Vella&amp;quot;,
      &amp;quot;restaurant_id&amp;quot; : &amp;quot;41704620&amp;quot;
   }
)

# after insert, return  WriteResult
WriteResult({ &amp;quot;nInserted&amp;quot; : 1 })

# or
var r = db.restaurants.insert(...)

# Three methods to insert
insert  insertOne  insertMany
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;find-or-query&#34;&gt;Find or Query&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find( { &amp;quot;address.zipcode&amp;quot;: &amp;quot;10075&amp;quot;, &amp;quot;borough&amp;quot;: &amp;quot;Manhattan&amp;quot;  } )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-query&#34;&gt;Array Query&lt;/h3&gt;

&lt;h4 id=&#34;exact-match&#34;&gt;Exact Match&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.users.find( { badges: [ &amp;quot;blue&amp;quot;, &amp;quot;black&amp;quot; ] } )

{
   &amp;quot;_id&amp;quot; : 1,
   &amp;quot;name&amp;quot; : &amp;quot;sue&amp;quot;,
   &amp;quot;age&amp;quot; : 19,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;P&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot;, &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 17, 3 ]
   &amp;quot;badges&amp;quot; : [ &amp;quot;blue&amp;quot;, &amp;quot;black&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 20 }, { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 10 } ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;match-an-array-element&#34;&gt;Match an Array Element&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.users.find( { badges: &amp;quot;black&amp;quot; } )

{
   &amp;quot;_id&amp;quot; : 1,
   &amp;quot;name&amp;quot; : &amp;quot;sue&amp;quot;,
   &amp;quot;age&amp;quot; : 19,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;P&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot;, &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 17, 3 ]
   &amp;quot;badges&amp;quot; : [ &amp;quot;blue&amp;quot;, &amp;quot;black&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 20 }, { &amp;quot;points&amp;quot; : 85, &amp;quot;bonus&amp;quot; : 10 } ]
}
{
   &amp;quot;_id&amp;quot; : 4,
   &amp;quot;name&amp;quot; : &amp;quot;xi&amp;quot;,
   &amp;quot;age&amp;quot; : 34,
   &amp;quot;type&amp;quot; : 2,
   &amp;quot;status&amp;quot; : &amp;quot;D&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;artist&amp;quot; : &amp;quot;Chagall&amp;quot;, &amp;quot;food&amp;quot; : &amp;quot;chocolate&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 5, 11 ],
   &amp;quot;badges&amp;quot; : [ &amp;quot;red&amp;quot;, &amp;quot;black&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 53, &amp;quot;bonus&amp;quot; : 15 }, { &amp;quot;points&amp;quot; : 51, &amp;quot;bonus&amp;quot; : 15 } ]
}
{
   &amp;quot;_id&amp;quot; : 6,
   &amp;quot;name&amp;quot; : &amp;quot;abc&amp;quot;,
   &amp;quot;age&amp;quot; : 43,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;A&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot;, &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 18, 12 ],
   &amp;quot;badges&amp;quot; : [ &amp;quot;black&amp;quot;, &amp;quot;blue&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 78, &amp;quot;bonus&amp;quot; : 8 }, { &amp;quot;points&amp;quot; : 57, &amp;quot;bonus&amp;quot; : 7 } ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;match-a-specific-element-of-an-array&#34;&gt;Match a Specific Element of an Array&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.users.find( { &amp;quot;badges.0&amp;quot;: &amp;quot;black&amp;quot; } )

{
   &amp;quot;_id&amp;quot; : 6,
   &amp;quot;name&amp;quot; : &amp;quot;abc&amp;quot;,
   &amp;quot;age&amp;quot; : 43,
   &amp;quot;type&amp;quot; : 1,
   &amp;quot;status&amp;quot; : &amp;quot;A&amp;quot;,
   &amp;quot;favorites&amp;quot; : { &amp;quot;food&amp;quot; : &amp;quot;pizza&amp;quot;, &amp;quot;artist&amp;quot; : &amp;quot;Picasso&amp;quot; },
   &amp;quot;finished&amp;quot; : [ 18, 12 ],
   &amp;quot;badges&amp;quot; : [ &amp;quot;black&amp;quot;, &amp;quot;blue&amp;quot; ],
   &amp;quot;points&amp;quot; : [ { &amp;quot;points&amp;quot; : 78, &amp;quot;bonus&amp;quot; : 8 }, { &amp;quot;points&amp;quot; : 57, &amp;quot;bonus&amp;quot; : 7 } ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/tutorial/query-documents/#read-operations-arrays&#34;&gt;More&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;specify-conditions-with-operators&#34;&gt;Specify Conditions with Operators&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find( { &amp;quot;grades.score&amp;quot;: { $gt: 30 } } )
db.restaurants.find( { &amp;quot;grades.score&amp;quot;: { $lt: 10 } } )
db.restaurants.find( { &amp;quot;cuisine&amp;quot;: &amp;quot;Italian&amp;quot;, &amp;quot;address.zipcode&amp;quot;: &amp;quot;10075&amp;quot; } )
db.restaurants.find(
   { $or: [ { &amp;quot;cuisine&amp;quot;: &amp;quot;Italian&amp;quot; }, { &amp;quot;address.zipcode&amp;quot;: &amp;quot;10075&amp;quot; } ] }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/reference/operator/query/&#34;&gt;more&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;sort-query-results&#34;&gt;Sort Query Results&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find().sort( { &amp;quot;borough&amp;quot;: 1, &amp;quot;address.zipcode&amp;quot;: 1 } )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-partial-fields&#34;&gt;Show partial fields&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find({}, {borough: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pretty-results&#34;&gt;Pretty results&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.find().pretty()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;update&#34;&gt;Update&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.update(
    { &amp;quot;name&amp;quot; : &amp;quot;Juni&amp;quot; },
    {
      $set: { &amp;quot;cuisine&amp;quot;: &amp;quot;American (New)&amp;quot; },
      $currentDate: { &amp;quot;lastModified&amp;quot;: true }
    }
)

db.restaurants.update(
  { &amp;quot;restaurant_id&amp;quot; : &amp;quot;41156888&amp;quot; },
  { $set: { &amp;quot;address.street&amp;quot;: &amp;quot;East 31st Street&amp;quot; } }
)

db.restaurants.update(
  { &amp;quot;address.zipcode&amp;quot;: &amp;quot;10016&amp;quot;, cuisine: &amp;quot;Other&amp;quot; },
  {
    $set: { cuisine: &amp;quot;Category To Be Determined&amp;quot; },
    $currentDate: { &amp;quot;lastModified&amp;quot;: true }
  },
  { multi: true, upsert: true}
)

db.restaurants.update(
   { &amp;quot;restaurant_id&amp;quot; : &amp;quot;41704620&amp;quot; },
   {
     &amp;quot;name&amp;quot; : &amp;quot;Vella 2&amp;quot;,
     &amp;quot;address&amp;quot; : {
              &amp;quot;coord&amp;quot; : [ -73.9557413, 40.7720266 ],
              &amp;quot;building&amp;quot; : &amp;quot;1480&amp;quot;,
              &amp;quot;street&amp;quot; : &amp;quot;2 Avenue&amp;quot;,
              &amp;quot;zipcode&amp;quot; : &amp;quot;10075&amp;quot;
     }
   }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;自增id的实现&#34;&gt;自增ID的实现&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;collection store id&lt;/li&gt;
&lt;li&gt;$inc operator&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.ids.insert({name: &#39;test&#39;, value: NumberInt(0)})
db.ids.update({name: &#39;test&#39;}, {$inc: {value: 1}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/reference/operator/update/&#34;&gt;more&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;remove&#34;&gt;Remove&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.remove( { &amp;quot;borough&amp;quot;: &amp;quot;Manhattan&amp;quot; } )
db.restaurants.remove( { &amp;quot;borough&amp;quot;: &amp;quot;Queens&amp;quot; }, { justOne: true } )
db.restaurants.remove( { } )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-collection&#34;&gt;Drop collection&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.drop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;data-aggregation&#34;&gt;Data Aggregation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.collection.aggregate( [ &amp;lt;stage1&amp;gt;, &amp;lt;stage2&amp;gt;, ... ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;group&#34;&gt;Group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.aggregate(
   [
     { $group: { &amp;quot;_id&amp;quot;: &amp;quot;$borough&amp;quot;, &amp;quot;count&amp;quot;: { $sum: 1 } } }
   ]
)

{ &amp;quot;_id&amp;quot; : &amp;quot;Staten Island&amp;quot;, &amp;quot;count&amp;quot; : 969 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Brooklyn&amp;quot;, &amp;quot;count&amp;quot; : 6086 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Manhattan&amp;quot;, &amp;quot;count&amp;quot; : 10259 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Queens&amp;quot;, &amp;quot;count&amp;quot; : 5656 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Bronx&amp;quot;, &amp;quot;count&amp;quot; : 2338 }
{ &amp;quot;_id&amp;quot; : &amp;quot;Missing&amp;quot;, &amp;quot;count&amp;quot; : 51 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filter-and-group&#34;&gt;Filter and Group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.restaurants.aggregate(
   [
     { $match: { &amp;quot;borough&amp;quot;: &amp;quot;Queens&amp;quot;, &amp;quot;cuisine&amp;quot;: &amp;quot;Brazilian&amp;quot; } },
     { $group: { &amp;quot;_id&amp;quot;: &amp;quot;$address.zipcode&amp;quot; , &amp;quot;count&amp;quot;: { $sum: 1 } } }
   ]
)

{ &amp;quot;_id&amp;quot; : &amp;quot;11368&amp;quot;, &amp;quot;count&amp;quot; : 1 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11106&amp;quot;, &amp;quot;count&amp;quot; : 3 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11377&amp;quot;, &amp;quot;count&amp;quot; : 1 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11103&amp;quot;, &amp;quot;count&amp;quot; : 1 }
{ &amp;quot;_id&amp;quot; : &amp;quot;11101&amp;quot;, &amp;quot;count&amp;quot; : 2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;db.collection.mapReduce(
                         &amp;lt;map&amp;gt;,
                         &amp;lt;reduce&amp;gt;,
                         {
                           out: &amp;lt;collection&amp;gt;,
                           query: &amp;lt;document&amp;gt;,
                           sort: &amp;lt;document&amp;gt;,
                           limit: &amp;lt;number&amp;gt;,
                           finalize: &amp;lt;function&amp;gt;,
                           scope: &amp;lt;document&amp;gt;,
                           jsMode: &amp;lt;boolean&amp;gt;,
                           verbose: &amp;lt;boolean&amp;gt;,
                           bypassDocumentValidation: &amp;lt;boolean&amp;gt;
                         }
                       )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map-function&#34;&gt;Map Function&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function() {
   ...
   emit(key, value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The map function has the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the map function, reference the current document as this within the function.&lt;/li&gt;
&lt;li&gt;The map function should not access the database for any reason.&lt;/li&gt;
&lt;li&gt;The map function should be pure, or have no impact outside of the function (i.e. side effects.)&lt;/li&gt;
&lt;li&gt;A single emit can only hold half of MongoDB’s maximum BSON document size.&lt;/li&gt;
&lt;li&gt;The map function may optionally call emit(key,value) any number of times to create an output document associating key with value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following map function will call emit(key,value) either 0 or 1 times depending on the value of the input document’s status field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function() {
    if (this.status == &#39;A&#39;)
        emit(this.cust_id, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following map function may call emit(key,value) multiple times depending on the number of elements in the input document’s items field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function() {
    this.items.forEach(function(item){ emit(item.sku, 1); });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reduce-function&#34;&gt;Reduce Function&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function(key, values) {
   ...
   return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reduce function exhibits the following behaviors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The reduce function should not access the database, even to perform read operations.&lt;/li&gt;
&lt;li&gt;The reduce function should not affect the outside system.&lt;/li&gt;
&lt;li&gt;MongoDB will not call the reduce function for a key that has only a single value. The values argument is an array whose elements are the value objects that are “mapped” to the key.&lt;/li&gt;
&lt;li&gt;MongoDB can invoke the reduce function more than once for the same key. In this case, the previous output from the reduce function for that key will become one of the input values to the next reduce function invocation for that key.&lt;/li&gt;
&lt;li&gt;The reduce function can access the variables defined in the scope parameter.&lt;/li&gt;
&lt;li&gt;The inputs to reduce must not be larger than half of MongoDB’s maximum BSON document size. This requirement may be violated when large documents are returned and then joined together in subsequent reduce steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;reduce(key, [ C, reduce(key, [ A, B ]) ] ) == reduce( key, [ C, A, B ] )
reduce( key, [ reduce(key, valuesArray) ] ) == reduce( key, valuesArray )
reduce( key, [ A, B ] ) == reduce( key, [ B, A ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
     _id: ObjectId(&amp;quot;50a8240b927d5d8b5891743c&amp;quot;),
     cust_id: &amp;quot;abc123&amp;quot;,
     ord_date: new Date(&amp;quot;Oct 04, 2012&amp;quot;),
     status: &#39;A&#39;,
     price: 25,
     items: [ { sku: &amp;quot;mmm&amp;quot;, qty: 5, price: 2.5 },
              { sku: &amp;quot;nnn&amp;quot;, qty: 5, price: 2.5 } ]
}

var mapFunction1 = function() {
                       emit(this.cust_id, this.price);
                   };
var reduceFunction1 = function(keyCustId, valuesPrices) {
                          return Array.sum(valuesPrices);
                      };
db.orders.mapReduce(
                     mapFunction1,
                     reduceFunction1,
                     { out: &amp;quot;map_reduce_example&amp;quot; }
                   )
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>